[
  {
    "url": "https://api.github.com/repos/jqlang/jq/issues/3227",
    "repository_url": "https://api.github.com/repos/jqlang/jq",
    "labels_url": "https://api.github.com/repos/jqlang/jq/issues/3227/labels{/name}",
    "comments_url": "https://api.github.com/repos/jqlang/jq/issues/3227/comments",
    "events_url": "https://api.github.com/repos/jqlang/jq/issues/3227/events",
    "html_url": "https://github.com/jqlang/jq/issues/3227",
    "id": 2769129422,
    "node_id": "I_kwDOAE3WVc6lDY_O",
    "number": 3227,
    "title": "`reduce` and `foreach` with backtracking init have observable `DUPN`",
    "user": {
      "login": "kanwren",
      "id": 34543915,
      "node_id": "MDQ6VXNlcjM0NTQzOTE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/34543915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kanwren",
      "html_url": "https://github.com/kanwren",
      "followers_url": "https://api.github.com/users/kanwren/followers",
      "following_url": "https://api.github.com/users/kanwren/following{/other_user}",
      "gists_url": "https://api.github.com/users/kanwren/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kanwren/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kanwren/subscriptions",
      "organizations_url": "https://api.github.com/users/kanwren/orgs",
      "repos_url": "https://api.github.com/users/kanwren/repos",
      "events_url": "https://api.github.com/users/kanwren/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kanwren/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2025-01-05T05:56:40Z",
    "updated_at": "2025-01-07T03:15:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "The fix for https://github.com/jqlang/jq/issues/618 (7243989c52cea7933ace6535eae914c19eb1210a) introduced `DUPN` to the compilation of `reduce f as $x (init; update)` and `foreach f as $x (init; update; extract)` to address extra references being held.\r\n\r\nHowever, the value that `DUPN` dupes (that is, `.` as it is passed to `f`) comes from before a forkpoint, which makes `DUPN` unsafe here; if we backtrack to the `FORK` (in particular, if `init` backtracks), then `f` will see `.` mutated to `null`. This is a problem, as to my understanding the mutation in `DUPN` (and the other `-N` instructions) should be non-observable optimizations.\r\n\r\n# To reproduce\r\n\r\n```\r\n$ jq --null-input  '[] | reduce .[] as $x (0, 0; .)'\r\n0\r\njq: error (at <unknown>): Cannot iterate over null (null)\r\n\r\n$ jq --null-input '[] | foreach .[] as $x (0, 0; .)'\r\njq: error (at <unknown>): Cannot iterate over null (null)\r\n```\r\n\r\nThe init contains a `,`, so `.[]` gets `[]` on the first pass, but `null` when backtracking.\r\n\r\n# Expected behavior\r\n\r\n`reduce` and `foreach` should not break backtracks that run back through the body. That is to say, we should see:\r\n\r\n```\r\n$ jq --null-input '[] | reduce .[] as $x (0, 0; .)'\r\n0\r\n0\r\n\r\n$ jq --null-input '[] | foreach .[] as $x (0, 0; .)'\r\n<empty>\r\n```\r\n[^1]\r\n\r\nPut another way, it should be the same as e.g. `[] | . as $dot | reduce ($dot | .[]) as $x (0, 0; .)`, which is a workaround today.\r\n\r\n[^1]: This is the output from local testing of a potential fix (removing `FORK` from `foreach`, using `STOREV`/`LOADVN` instead of `DUPN` in `reduce`)\r\n\r\n# Environment\r\n\r\n- OS: Linux (NixOS 25.05)\r\n- `jq` version: tested against current `master` (588ff1874c8c394253c231733047a550efe78260) and 1.7.1\r\n\r\n# Additional context\r\n\r\nI noticed this issue while inspecting the bytecode, which gives some insights towards addressing it, which I've noted below.\r\n\r\nFrom digging in thread history, it seems that @leonid-s-usov noticed the same issues with the bytecode while looking for a way to remove the `DUPN` instruction for another reason. They give a draft of potential changes in https://github.com/jqlang/jq/pull/2059, which from my testing would be sufficient to fix this bug.\r\n\r\n## `foreach`\r\n\r\nThis shouldn't be an issue with `foreach` in the first place, and should be fixable without having to compromise. Inspecting the bytecode for the example above:\r\n\r\n```\r\n// input and init\r\n0000 TOP\r\n0001 LOADK []\r\n0003 DUP\r\n0004 FORK 0010\r\n0006 LOADK 0\r\n0008 JUMP 0012\r\n0010 LOADK 0\r\n\r\n// foreach\r\n0012 STOREV $foreach:0\r\n0015 FORK 0031\r\n0017 DUPN\r\n0018 EACH\r\n0019 STOREV $x:1\r\n0022 LOADVN $foreach:0\r\n0025 DUP\r\n0026 STOREV $foreach:0\r\n0029 JUMP 0032\r\n0031 BACKTRACK\r\n\r\n0032 RET\r\n```\r\n\r\nNotice that the `FORK 0031` backtracks directly to a `BACKTRACK`, which is unnecessary, as backtracks in the loop body will already backtrack properly, and we don't need to consume the stream like we do in `reduce`. I suspect that this is only here because 5a863bf0103ccd82edf32cfe4c37ed92783a224d copied `gen_reduce` and modified it a bit.\r\n\r\nIf the `FORK ... BACKTRACK` (and `JUMP`) structure is removed, then `DUPN` isn't necessary anymore; if we don't need to backtrack, then `.` isn't held across a forkpoint and `stack_pop_will_free`, meaning no unnecessary references. If we do need to backtrack, then we needed to keep the reference anyway.\r\n\r\n## `reduce`\r\n\r\n`reduce` can't avoid the `FORK ... BACKTRACK`. A `STOREV $dot ... FORK ... LOADVN $dot` would serve a similar purpose to `DUPN` for avoiding unnecessary references while not causing backtracking issues; that's the only potential fix I can think of while staying within the constraints of the current instruction set.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/jqlang/jq/issues/3227/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/jqlang/jq/issues/3227/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/jqlang/jq/issues/3222",
    "repository_url": "https://api.github.com/repos/jqlang/jq",
    "labels_url": "https://api.github.com/repos/jqlang/jq/issues/3222/labels{/name}",
    "comments_url": "https://api.github.com/repos/jqlang/jq/issues/3222/comments",
    "events_url": "https://api.github.com/repos/jqlang/jq/issues/3222/events",
    "html_url": "https://github.com/jqlang/jq/issues/3222",
    "id": 2739619819,
    "node_id": "I_kwDOAE3WVc6jS0fr",
    "number": 3222,
    "title": "Redundant subexpression in Generators and iterators example in doc",
    "user": {
      "login": "jhcarl0814",
      "id": 5171262,
      "node_id": "MDQ6VXNlcjUxNzEyNjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5171262?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jhcarl0814",
      "html_url": "https://github.com/jhcarl0814",
      "followers_url": "https://api.github.com/users/jhcarl0814/followers",
      "following_url": "https://api.github.com/users/jhcarl0814/following{/other_user}",
      "gists_url": "https://api.github.com/users/jhcarl0814/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jhcarl0814/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jhcarl0814/subscriptions",
      "organizations_url": "https://api.github.com/users/jhcarl0814/orgs",
      "repos_url": "https://api.github.com/users/jhcarl0814/repos",
      "events_url": "https://api.github.com/users/jhcarl0814/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jhcarl0814/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-12-14T06:38:23Z",
    "updated_at": "2024-12-14T06:38:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "**Describe the bug**\r\n[jq 1.7 Manual / Generators and iterators](https://jqlang.github.io/jq/manual/#generators-and-iterators)\r\n\r\n**To Reproduce**\r\nIn the first example:\r\n`jq 'def range(init; upto; by): def _range: if (by > 0 and . < upto) or (by < 0 and . > upto) then ., ((.+by)|_range) else . end; if by == 0 then init else init|_range end | select((by > 0 and . < upto) or (by < 0 and . > upto)); range(0; 10; 3)'`\r\n1. Redundant operation: `else .` produces an extra value beyond `upto`, then `| select((by > 0 and . < upto) or (by < 0 and . > upto))` filters it.\r\n2. Should result in `empty` when `init == upto`.\r\n\r\n**Expected behavior**\r\nCan be simplified and corrected to:\r\n`jq 'def range(init; upto; by): def _range: if (by > 0 and . < upto) or (by < 0 and . > upto) then ., ((.+by)|_range) else empty end; if init == upto then empty elif by == 0 then init else init|_range end; range(0; 10; 3)'`\r\n\r\n**Environment (please complete the following information):**\r\n/\r\n\r\n**Additional context**\r\n/\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/jqlang/jq/issues/3222/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/jqlang/jq/issues/3222/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/jqlang/jq/issues/3221",
    "repository_url": "https://api.github.com/repos/jqlang/jq",
    "labels_url": "https://api.github.com/repos/jqlang/jq/issues/3221/labels{/name}",
    "comments_url": "https://api.github.com/repos/jqlang/jq/issues/3221/comments",
    "events_url": "https://api.github.com/repos/jqlang/jq/issues/3221/events",
    "html_url": "https://github.com/jqlang/jq/issues/3221",
    "id": 2735738178,
    "node_id": "I_kwDOAE3WVc6jEA1C",
    "number": 3221,
    "title": "website: generate website from markdown docs",
    "user": {
      "login": "yochem",
      "id": 23235841,
      "node_id": "MDQ6VXNlcjIzMjM1ODQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/23235841?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yochem",
      "html_url": "https://github.com/yochem",
      "followers_url": "https://api.github.com/users/yochem/followers",
      "following_url": "https://api.github.com/users/yochem/following{/other_user}",
      "gists_url": "https://api.github.com/users/yochem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yochem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yochem/subscriptions",
      "organizations_url": "https://api.github.com/users/yochem/orgs",
      "repos_url": "https://api.github.com/users/yochem/repos",
      "events_url": "https://api.github.com/users/yochem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yochem/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-12-12T12:16:22Z",
    "updated_at": "2024-12-25T17:24:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "TL;DR: POC of markdown generated website in https://github.com/yochem/jqdocs. \r\n\r\nThis proposes to continue the incredible work done in https://github.com/jqlang/jq/pull/3189, to convert the documentation fully to markdown and drop the custom python generation from yaml content. It is meant as a future update, and if wanted, I will start working on it seriously after #3189 is merged.\r\n\r\nThe markdown is converted to the manpage using pandoc (as implemented in #3189), and deployed as website using a static site generator.\r\n\r\nMarkdown is easy to read and write. Markdown written in a yml file is not. You can't use your editors features, and writing/debugging/testing the examples is also hard. Having the docs in markdown also allows easy readability on GitHub, [see for yourself](https://github.com/yochem/jqdocs/blob/e79c6a3c182b30a15415a501e3a95ae7016255cd/output/v1.4.md).\r\n\r\n## Ideas to discuss\r\n- [ ] Which SSG?\r\n  - Jekyll: built into GitHub, slow, but works fine. Not that much functionality / flexibility.\r\n  - Hugo: Very fast, flexible, and extendable. Can for example include code files (so example can be in .jq files, e.g. be in examples/dot-op.jq)\r\n  - Pandoc: Not a SSG, but already used for the manpage. Can also do some templating / markdown including, but probably requires more manual work\r\n- [ ] Website in it's own repo\r\n  - Pro: jq repo get's lighter, removing code that is not necessary for jq itself\r\n  - Pro: build / deployment is a bit easier\r\n  - Pro: separation of concern\r\n  - Con: need to decide on where to place the actual docs (markdown content). Do we want to have _all_ docs in a separate repo, or keep it close to the code, thus in the jq repo, and pull that content to the website repo with a github action?\r\n  - No need to save the documentation for every version in a folder anymore, we can pull the documentation for every tag 'v*' to the website repo (would need to backport the 'new style' docs to the version tags)\r\n- [ ] as I suggested in https://github.com/jqlang/jq/discussions/3219, it might be a good idea to buy a domain name for the website\r\n- [ ] and probably more...\r\n\r\n## Progress\r\n\r\nI created a POC at https://github.com/yochem/jqdocs.\r\n\r\nOne of the concerns raised in https://github.com/jqlang/jq/pull/3189#issuecomment-2536247794 is that the manuals of old versions also need to be converted. I created a small POC for this conversion with a python script. It's currently in the jqdocs repo, along with the resulting markdown manuals, to give a taste of what that looks like. There is still a lot of room for improvement: sections can be split over multiple files, code examples can be in in own files (`ex-1.jq`, `ex-1-output.json`, etc.).\r\n\r\nI also created a small POC of a Hugo repo, but it's not in the repo yet. I'll update you when it is.\r\n\r\nLet me know what you think! Are these good suggestions? Welcome to explore this idea?\r\n\r\nP.S. I understand that #3189 is already a huge update, and required quite a lot of time and effort from its author and the maintainers of jq. Therefore, if you want me to continue on this, my goal will be that the PR is relatively burden free for the maintainers:\r\n\r\n- As less visual changes to the website as possible. No content updates, no layout changes.\r\n- I want this to be a drop in replacement. Let it build via GH actions, little personal workflow changes required for the maintainers.\r\n- The result should be simple, and understandable. Just markdown content. No weird extensions of markdown/hugo, minimal custom code.\r\n\r\nI hope these changes will make it easier to update docs, and that you can write code/markup in the right filetype: no more markdown in a yml file that also contains jq and json code. This will probably make it a lot easier to debug/test/use the features of your editor!",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/jqlang/jq/issues/3221/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/jqlang/jq/issues/3221/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/jqlang/jq/issues/3212",
    "repository_url": "https://api.github.com/repos/jqlang/jq",
    "labels_url": "https://api.github.com/repos/jqlang/jq/issues/3212/labels{/name}",
    "comments_url": "https://api.github.com/repos/jqlang/jq/issues/3212/comments",
    "events_url": "https://api.github.com/repos/jqlang/jq/issues/3212/events",
    "html_url": "https://github.com/jqlang/jq/pull/3212",
    "id": 2712841726,
    "node_id": "PR_kwDOAE3WVc6DyLB3",
    "number": 3212,
    "title": "build: fix insecure RUNPATH",
    "user": {
      "login": "orbea",
      "id": 4204285,
      "node_id": "MDQ6VXNlcjQyMDQyODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4204285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/orbea",
      "html_url": "https://github.com/orbea",
      "followers_url": "https://api.github.com/users/orbea/followers",
      "following_url": "https://api.github.com/users/orbea/following{/other_user}",
      "gists_url": "https://api.github.com/users/orbea/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/orbea/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/orbea/subscriptions",
      "organizations_url": "https://api.github.com/users/orbea/orgs",
      "repos_url": "https://api.github.com/users/orbea/repos",
      "events_url": "https://api.github.com/users/orbea/events{/privacy}",
      "received_events_url": "https://api.github.com/users/orbea/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 107669100,
        "node_id": "MDU6TGFiZWwxMDc2NjkxMDA=",
        "url": "https://api.github.com/repos/jqlang/jq/labels/build",
        "name": "build",
        "color": "eb6420",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-12-02T17:49:06Z",
    "updated_at": "2024-12-02T23:22:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/jqlang/jq/pulls/3212",
      "html_url": "https://github.com/jqlang/jq/pull/3212",
      "diff_url": "https://github.com/jqlang/jq/pull/3212.diff",
      "patch_url": "https://github.com/jqlang/jq/pull/3212.patch",
      "merged_at": null
    },
    "body": "In Gentoo -static-libtool-libs causes a QA Notice.\r\n\r\n * QA Notice: The following files contain insecure RUNPATHs\r\n *  Please file a bug about this at https://bugs.gentoo.org/\r\n *  with the maintainer of the package.\r\n *   /var/tmp/portage/app-misc/jq-1.7.1/image/usr/bin/jqn    RPATH: /var/tmp/portage/app-misc/jq-1.7.1/work/jq-jq-1.7.1/.libs\r\n\r\nGentoo-Issue: https://bugs.gentoo.org/945698",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/jqlang/jq/issues/3212/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/jqlang/jq/issues/3212/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/jqlang/jq/issues/3211",
    "repository_url": "https://api.github.com/repos/jqlang/jq",
    "labels_url": "https://api.github.com/repos/jqlang/jq/issues/3211/labels{/name}",
    "comments_url": "https://api.github.com/repos/jqlang/jq/issues/3211/comments",
    "events_url": "https://api.github.com/repos/jqlang/jq/issues/3211/events",
    "html_url": "https://github.com/jqlang/jq/issues/3211",
    "id": 2704187545,
    "node_id": "I_kwDOAE3WVc6hLqCZ",
    "number": 3211,
    "title": "`reduce`/`foreach` behaviour when `UPDATE` yields not exactly one output",
    "user": {
      "login": "01mf02",
      "id": 864342,
      "node_id": "MDQ6VXNlcjg2NDM0Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/864342?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/01mf02",
      "html_url": "https://github.com/01mf02",
      "followers_url": "https://api.github.com/users/01mf02/followers",
      "following_url": "https://api.github.com/users/01mf02/following{/other_user}",
      "gists_url": "https://api.github.com/users/01mf02/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/01mf02/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/01mf02/subscriptions",
      "organizations_url": "https://api.github.com/users/01mf02/orgs",
      "repos_url": "https://api.github.com/users/01mf02/repos",
      "events_url": "https://api.github.com/users/01mf02/events{/privacy}",
      "received_events_url": "https://api.github.com/users/01mf02/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2024-11-29T07:30:46Z",
    "updated_at": "2024-12-16T16:32:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "In #3205, @itchyny changed the behaviour of `foreach`/`reduce` when `UPDATE` returns no outputs.\r\nIn this issue, I would like to discuss a more far-reaching modification of the behaviour of `reduce`/`foreach` based on the current description in the jq manual, which I call [*@itchyny's desugarings*](https://github.com/01mf02/jaq/issues/216#issuecomment-2473278831).\r\n\r\nThe jq manual describes `reduce`/`foreach` using desugarings given by @itchyny. In a nutshell, these desugarings suggest that `reduce xs as $x (INIT; UPDATE)` yields the following, when `xs` yields `x1`, ..., `xn`:\r\n\r\n~~~\r\nINIT\r\n| x1 as $x | UPDATE\r\n...\r\n| xn as $x | UPDATE\r\n~~~\r\n\r\nSimilarly for `foreach xs as $x (INIT; UPDATE; EXTRACT)`:\r\n\r\n~~~\r\nINIT |\r\nx1 as $x | UPDATE | EXTRACT,\r\n...\r\nxn as $x | UPDATE | EXTRACT,\r\nempty\r\n~~~\r\n\r\nHowever, these desugarings correspond to the current jq behaviour only if `UPDATE` yields exactly one value.\r\nThe manual does not make this explicit, using rather vague explanations such as \"So the effect is similar to running something like this\". I find this kind of formulation quite unfortunate, leaving readers without understanding what is really going on.\r\n\r\nLet me digress a bit to consider the following question: What would a user find \"intuitive\" when using `reduce` with\r\n`UPDATE` returning zero or more than one outputs? For this, I find it interesting to consider the question: What has a user learned so far about jq?\r\n\r\nIn particular, over time, users infer a number of principles from jq's behaviour:\r\n\r\n1. jq filters can yield any number of outputs, between zero and infinite.\r\n2. jq tries to consider all outputs of a filter, if possible.\r\n\r\nI find the second point particularly important.\r\nFor example, a user learns that `(1, 2) + (3, 4)` evaluates to all combinations of sums.\r\nSimilarly, a user learns that running a function `def f($x; $y): ...; f(1, 2; 3, 4)` is not the same as running `f(1; 3)` or `f(2; 4)` --- again, it runs all combinations.\r\nAlso, a user learns that `.[] | . + 1` takes *all* values returned by `.[]` and add 1 to every one of these values.\r\nThis behaviour is everywhere in jq, and I believe that most reasonably advanced jq users recognise it as a core principle of the language.[^exceptions]\r\n\r\n[^exceptions]: There are exceptions to this principle, but these usually exist for good reasons; for example, `{a: 1} | .a |= (2, 3)` yields only `{\"a\":2}`, because an object cannot have more than one value for a single field.\r\n\r\nNow let us look at the current implementation of `reduce`:\r\nEven after @itchyny's change, `reduce` actually throws away all results of `UPDATE` except for the last, although it takes the effort to actually compute the outputs.\r\nI would argue that this goes pretty much against user expectations in *two* ways --- first, `reduce` does not use all outputs\r\n(violating the core principle that I postulated above), and in addition, it still actually computes all outputs.\r\nYou can see this by an example:\r\n\r\n~~~\r\n$ ./jq -n 'reduce (1, 2) as $x (0; 2, 3 | debug)'\r\n[\"DEBUG:\",2]\r\n[\"DEBUG:\",3]\r\n[\"DEBUG:\",2]\r\n[\"DEBUG:\",3]\r\n3\r\n~~~\r\n\r\n`foreach` is a bit better in that respect, because it pipes all outputs of `UPDATE` to `EXTRACT`, however, it also does not consider these outputs in future iterations of `UPDATE`.\r\n\r\nIn contrast, @itchyny's desugarings of `reduce` and `foreach` have a number of advantages:\r\n\r\n* They are the most compact description of what happens when `UPDATE` always yields a single output, which is the case most users care about anyway.\r\n* They are formulated using the jq language itself, whereas the behaviour currently implemented in jq needs to be described by pseudo-code (which is not currently done anywhere else in the jq manual).\r\n* @itchyny's desugarings consider all outputs of `UPDATE`, which I believe to align more closely with user expectations (as explained above).\r\n* When `UPDATE` returns infinitely many outputs, then executing @itchyny's desugarings yields outputs, whereas in the current jq behaviour, no outputs are yielded.\r\n* @itchyny's desugarings only use operators that can be used together with updates (`|` and `,`), meaning that users can infer naturally how\r\n  updates with `reduce`/`foreach` on the left-hand side are executed. (Update with `reduce`/`foreach` on the LHS currently work only to a limited extent.)\r\n\r\nThinking about the disadvantages of @itchyny's desugarings, I can honestly think about two main issues:\r\n\r\n* Compatibility:\r\n  Existing jq scripts might depend on the current actual jq behaviour of handling `UPDATE`. However, even @itchyny's recent change (#3205) breaks compatibility to some degree, so perhaps this would be a good opportunity to go all the way here. Especially because so far, the current jq behaviour is not documented.\r\n* Performance:\r\n  When `UPDATE` may return more than one value, executing @itchyny's desugaring makes it necessary to store on the stack\r\n  a closure to retrieve the remaining values later. In particular, this can become a problem when we run `foreach` with\r\n  an infinite number of input elements `$x`, because each `$x` then increases the stack size, which effectively limits the number of input elements that we can process. However, I have not met this issue so far in practice.\r\n\r\nTL;DR: I would like the jq maintainers to reconsider how `reduce`/`foreach` are to be executed when `UPDATE` yields not exactly one output. I hope to have made a convincing case for @itchyny's desugarings.\r\nHaving implemented them myself in jaq, I can speak from experience when saying that they are not that hard to implement and no users complained about them yet. :)",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/jqlang/jq/issues/3211/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/jqlang/jq/issues/3211/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  }
]
